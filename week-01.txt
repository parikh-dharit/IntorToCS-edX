Python Basics

-> Introduction to python
-we'll learn:
	programming in python
	think algorithmically
	computational problem solving
	
-topics:
	data structure
	iteration and recursion
	abstraction
	organize and modularize
	algorithms
	algorithmic complexity

- copmuters perform basic calculations quickly and remember things.

- declarative knowledge(facts info) vs imperative knowledge (steps info)
- second of more value in our case.

- declarative knowledge: square root of number x is y such that y*y = x.
- imperative knowledge: 
	1> start with a guess g.
	2> if g*g is close enough to x, stop and say g is the answer
	3> otherwise improve guess by averaging g and x/g.
	4> using this new guess as g repeat the process from step 2.
	
- what is algorithm (recipe)
	> sequence of steps
	> flow control
	> when to stop
	
- cpature a recipe (algorithm) in a mechanical process
	> fixed program: application specific devices
	> stored program: general purpose (computer)

- basic machine architecture
	> memory
	> ALU - do primitive ops
	> control unit - program counter
	> input/output
	
- programming language
	> syntax
	> semantics: static -> have meaning
	
- syntax: determines whether a string is legal
  static semantics: determines whether a string has meaning
  semantics: assigns a meaning to a legal sentence
  
- a program is a sequence of definitions and commands
  programs manipulate data objects
  objects have type
 
- objects are scalar (cannot be subdivided) and non scalar (has sub parts)

- scalar objects: int, float, bool, NoneType; use type()

- assignment (=), value at right assigned to the left variable name on name table

- comparison: >, >=, <, <=, ==, !=

- branching: if ___:, else:

- variables, binding, name (descriptive, meaningful, cannot be keywods), value(information stored, can be updated)
	x = 2
	x = x*x*x
	y = x+1; = is assignment, binds.

- string: sequence of characters
	add two strings(+), concatenate
	sucsessive concat. (*), multiplication of a string with number (3 * "hello")
	len(str), length of str string
	indexing, starts from 0
	slicing, str[1:3] substring of str[1] and str[2]
	
- input/output: output -> print;  input -> str = input("helllo"), num = int(input(5))

- control flow: while loop, for loop
	n = 0;
	while(n<5):
		print(n)
		n = n+1
	
	for n in range(5):
		print(n)

- range(start, stop, step)

- break; breaks out of that loop

- exercise solution:
strType = "string"
if ((type(varA)==type(strType)) or (type(varB)==type(strType))):
    print("string involved")
elif (varA > varB):
    print("bigger")
elif (varA == varB):
    print("equal")
elif (varA < varB):
    print("smaller")
	
- iterative algorithm: guess and check

- problem 1:

Assume s is a string of lower case characters.

Write a program that counts up the number of vowels contained in the string s. Valid vowels are: 'a', 'e', 'i', 'o', and 'u'. For example, if s = 'azcbobobegghakl', your program should print:

Number of vowels: 5

solution:
numOfVowels = 0
for ch in s:
    if ch=='a' or ch=='e' or ch=='i' or ch=='o' or ch=='u':
        numOfVowels = numOfVowels + 1
print("Number of vowels: " + str(numOfVowels))


- problem 2:

Assume s is a string of lower case characters.

Write a program that prints the number of times the string 'bob' occurs in s. For example, if s = 'azcbobobegghakl', then your program should print

Number of times bob occurs is: 2

solution:
matches = 0
for i in range(len(s)-2):
    if s[i:(i+3)]=='bob':
        matches += 1
print("Number of times bob occurs is: " + str(matches))


- problem 3:

Assume s is a string of lower case characters.

Write a program that prints the longest substring of s in which the letters occur in alphabetical order. For example, if s = 'azcbobobegghakl', then your program should print

Longest substring in alphabetical order is: beggh
In the case of ties, print the first substring. For example, if s = 'abcbcd', then your program should print

Longest substring in alphabetical order is: abc

solution:
subIndex = 0
subLen = 0
tSubIndex = 0
tSubLen = 0
count = 0

for i in range(len(s)-1):
    count = i
    tSubIndex = i
    while s[count]<=s[count+1]:
        count = count + 1
        if (count + 1)>=len(s):
            break
    tSubLen = count - i + 1
    if tSubLen > subLen:
        subLen = tSubLen
        subIndex = tSubIndex
print("Longest substring in alphabetical order is: " + s[subIndex:(subIndex+subLen)])